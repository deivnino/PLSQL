create or replace PACKAGE PKG_EJECUTA_CARGUES 
AS 
/*****************************************************************************
  APLICACION:           SIBO DAVIPLATA
  NOMBRE:               PKG_EJECUTA_CARGUES
  PROPOSITO:            Este paquete se encarga de agrupar todos los procedimientos 
  utilizados para iniciar los del sistema DAVIPLATA.
  
  PARAMETROS:
  ENTRADA:              Ninguno
  SALIDA:               Ninguno
  
  DISEÑADO POR:         ASESOFTWARE
  DESARROLLADO POR:     ALFONSO PIMIENTA

  REVISIONES:
  Versión      Fecha         Autor                               Descripción
  ---------    ----------    --------------------------------    --------------
  1.0          2016-12-01    Alfonso Pimienta Trujillo           Creación Procedimiento.
  ******************************************************************************/
PROCEDURE PRC_CONSULTA_PARAMETROS(
                                  P_NOMBREARCHIVO             IN VARCHAR2 , 
                                  TIPO_ARCHIVO                OUT INTEGER ,
                                  P_PREFIJO_TABLA_TEMP_ERROR  OUT VARCHAR2,
                                  P_PREFIJO_TABLA_TEMP_BAD    OUT VARCHAR2,
                                  P_PREFIJO_TABLA_TEM_STAGE   OUT VARCHAR2,
                                  P_TABLA_DE_DESTINO          OUT VARCHAR2,
                                  P_SECUENCIA_TABLA_DESTINO   OUT VARCHAR2,
                                  P_CURSORES_CADENA           OUT CLOB,
                                  P_COLUMNAS_TABLA_DESTINO    OUT CLOB,
                                  P_CADENA_CONCATENA_ERROR    OUT CLOB
                                  );

PROCEDURE PRC_INI_PRELIQUIDA_GENERICO(TIPO_CARGUE IN VARCHAR2, NOMBRE_ARCHIVO_ORIGEN IN VARCHAR2, FECHA_ARCHIVO IN VARCHAR2, SALIDA OUT NUMERIC);

END PKG_EJECUTA_CARGUES;
/
create or replace PACKAGE BODY PKG_EJECUTA_CARGUES
AS
  /*****************************************************************************
  APLICACION:           SIBO DAVIPLATA
  NOMBRE:               PKG_EJECUTA_CARGUES
  PROPOSITO:            Este paquete se encarga de agrupar todos los procedimientos
  utilizados para iniciar los del sistema DAVIPLATA.
  PARAMETROS:
  ENTRADA:              Ninguno
  SALIDA:               Ninguno
  DISEÑADO POR:         ASESOFTWARE
  DESARROLLADO POR:     ALFONSO PIMIENTA
  REVISIONES:
  Versión      Fecha         Autor                               Descripción
  ---------    ----------    --------------------------------    --------------
  1.0          2016-12-01    Alfonso Pimienta Trujillo           Creación Procedimiento.
  ******************************************************************************/
  /******************************************************************************
  CONSTANTES
  ******************************************************************************/
  C_BANDERA_ALTA CONSTANT NUMERIC := 0;
  C_BANDERA_BAJA CONSTANT NUMERIC := 1;
  --C_PREFIJO_TABLA_ERROR          CONSTANT VARCHAR2(30) := 'ERROR$_EXT_LISTRESTRIC';
  --C_PREFIJO_TABLA_BAD            CONSTANT VARCHAR2(30) := 'BAD$_EXT_LISTRESTRIC';
  --LISTAS RESTRICTIVAS
  --C_TABLA_STAGE_LISTAR           CONSTANT VARCHAR2(30) := 'PROCESA_LISTAS_R';
  --C_TABLA_DATOS_LISTASR          CONSTANT VARCHAR2(30) := 'LISTAS_R';
  --C_PROCESO_NEGOCIO_LISTASR      CONSTANT VARCHAR2(30) := 'LISTAS_RECTRICTIVAS';
  --UNIDAD PARA LAS VICTIMAS
  --C_TABLA_STAGE_UARIV            CONSTANT VARCHAR2(30) := 'STAGE_UARIV';
  --C_TABLA_DATOS_UARIV            CONSTANT VARCHAR2(30) := 'PRELIQUIDACION_VICTIMAS';
  --C_TABLA_PROCESA_UARIV          CONSTANT VARCHAR2(30) := 'PROCESA_VICTIMAS';
  --C_PROCESO_NEGOCIO_UARIV        CONSTANT VARCHAR2(30) := 'UNIDAD_PARA_VICITMAS';
  --FAMILIAS EN ACCIÓN
  --C_TABLA_STAGE_MFEA             CONSTANT VARCHAR2(30) := 'STAGE_MFEA';
  --C_TABLA_DATOS_MFEA             CONSTANT VARCHAR2(30) := 'PRELIQUIDACION_MFEA';
  --C_TABLA_PROCESA_MFEA           CONSTANT VARCHAR2(30) := 'PROCESA_MFEA';
  --C_PROCESO_NEGOCIO_MFEA         CONSTANT VARCHAR2(30) := 'FAMILIAS_ACCION';
  --OTROS CLIENTES
  --C_NOMBRE_DATOS_OTROS           CONSTANT VARCHAR2(30) := 'POR DEFINIR';
  --C_NOMBRE_DATOS_OTROS           CONSTANT VARCHAR2(30) := 'PRELIQUIDACION_OTROS';
  --C_NOMBRE_PROCESA_OTROS         CONSTANT VARCHAR2(30) := 'PROCESA_OTROS';
  --C_PROCESO_NEGOCIO              CONSTANT VARCHAR2(30) := 'OTROS CLIENTES';
  /*VARIABLES GLOBALES*/
  NOMBRE_TABLA_ORIGEN  VARCHAR2(30);
  NOMBRE_TABLA_DESTINO VARCHAR2(30);
  PROCESO_NEGOCIO      VARCHAR2(50);
  PRE_TABLA_ERROR      VARCHAR2(20);
  PRE_TABLA_BAD        VARCHAR2(20);
  
  PROCEDURE PRC_CONSULTA_PARAMETROS(
      P_NOMBREARCHIVO IN VARCHAR2 ,
      TIPO_ARCHIVO OUT INTEGER ,
      P_PREFIJO_TABLA_TEMP_ERROR OUT VARCHAR2,
      P_PREFIJO_TABLA_TEMP_BAD OUT VARCHAR2,
      P_PREFIJO_TABLA_TEM_STAGE OUT VARCHAR2,
      P_TABLA_DE_DESTINO OUT VARCHAR2,
      P_SECUENCIA_TABLA_DESTINO OUT VARCHAR2,
      P_CURSORES_CADENA OUT CLOB,
      P_COLUMNAS_TABLA_DESTINO OUT CLOB,
      P_CADENA_CONCATENA_ERROR OUT CLOB )
  IS
    PREFIJO_TABLA_TEMP_ERROR VARCHAR2(100);
    PREFIJO_TABLA_TEMP_BAD   VARCHAR2(100);
    PREFIJO_TABLA_TEM_STAGE  VARCHAR2(100);
    TABLA_DE_DESTINO         VARCHAR2(100);
    SECUENCIA_TABLA_DESTINO  VARCHAR2(100);
    CURSORES_CADENA CLOB;
    COLUMNAS_TABLA_DESTINO CLOB;
    CADENA_CONCATENA_ERROR CLOB;
  BEGIN
   
      BEGIN
        SELECT IDENTIFICADOR
        INTO TIPO_ARCHIVO
        FROM TIPO_ARCHIVO
        WHERE TABLAINSERCION = P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO EN LA TABLA TIPO_ARCHIVO DE '||P_NOMBREARCHIVO);
      END;
      BEGIN
        SELECT VALOR_PARAMETRO
        INTO PREFIJO_TABLA_TEMP_ERROR
        FROM PARAMETROS_SIBO
        WHERE NOMBRE_PARAMETRO = 'PREFIJO_TABLA_TEMP_ERROR_'
          ||P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO PREFIJO_TABLA_TEMP_ERROR_ EN LA TABLA PARAMETROS_SIBO');
      END;
      BEGIN
        SELECT VALOR_PARAMETRO
        INTO PREFIJO_TABLA_TEMP_BAD
        FROM PARAMETROS_SIBO
        WHERE NOMBRE_PARAMETRO = 'PREFIJO_TABLA_TEMP_BAD_'
          ||P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO PREFIJO_TABLA_TEMP_BAD_ EN LA TABLA PARAMETROS_SIBO');
      END;
      BEGIN
        SELECT VALOR_PARAMETRO
        INTO PREFIJO_TABLA_TEM_STAGE
        FROM PARAMETROS_SIBO
        WHERE NOMBRE_PARAMETRO = 'PREFIJO_TABLA_TEM_STAGE_'
          ||P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO PREFIJO_TABLA_TEM_STAGE_ EN LA TABLA PARAMETROS_SIBO');
      END;
      BEGIN
        SELECT VALOR_PARAMETRO
        INTO TABLA_DE_DESTINO
        FROM PARAMETROS_SIBO
        WHERE NOMBRE_PARAMETRO = 'TABLA_DE_DESTINO_'
          ||P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO TABLA_DE_DESTINO_ EN LA TABLA PARAMETROS_SIBO');
      END;

      BEGIN
        SELECT VALOR_PARAMETRO
        INTO CURSORES_CADENA
        FROM PARAMETROS_SIBO
        WHERE NOMBRE_PARAMETRO = 'CURSORES_CADENA_'
          ||P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO CURSORES_CADENA_ EN LA TABLA PARAMETROS_SIBO');
      END;
      BEGIN
        SELECT VALOR_PARAMETRO
        INTO COLUMNAS_TABLA_DESTINO
        FROM PARAMETROS_SIBO
        WHERE NOMBRE_PARAMETRO = 'COLUMNAS_TABLA_DESTINO_'
          ||P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO COLUMNAS_TABLA_DESTINO_ EN LA TABLA PARAMETROS_SIBO');
      END;
      
      BEGIN      
      SELECT VALOR_PARAMETRO
      INTO CADENA_CONCATENA_ERROR
      FROM PARAMETROS_SIBO
      WHERE NOMBRE_PARAMETRO = 'CADENA_CONCATENA_ERROR_'
        ||P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO CADENA_CONCATENA_ERROR_'||P_NOMBREARCHIVO ||' EN LA TABLA PARAMETROS_SIBO');
      END;

      BEGIN
        SELECT SECUENCIA
        INTO SECUENCIA_TABLA_DESTINO
        FROM TIPO_ARCHIVO
        WHERE TABLAINSERCION = P_NOMBREARCHIVO;
      EXCEPTION
      WHEN NO_DATA_FOUND THEN
        DBMS_OUTPUT.PUT_LINE('NO EXISTE PARAMETRO EN LA TABLA PARAMETROS_SIBO');
      END;

  BEGIN
    P_PREFIJO_TABLA_TEMP_ERROR := PREFIJO_TABLA_TEMP_ERROR;
    P_PREFIJO_TABLA_TEMP_BAD   := PREFIJO_TABLA_TEMP_BAD;
    P_PREFIJO_TABLA_TEM_STAGE  := PREFIJO_TABLA_TEM_STAGE;
    P_TABLA_DE_DESTINO         := TABLA_DE_DESTINO;
    P_SECUENCIA_TABLA_DESTINO  := SECUENCIA_TABLA_DESTINO;
    P_COLUMNAS_TABLA_DESTINO   := COLUMNAS_TABLA_DESTINO;
    P_CURSORES_CADENA          := CURSORES_CADENA;
    P_CADENA_CONCATENA_ERROR   := CADENA_CONCATENA_ERROR;
  END;

EXCEPTION WHEN TOO_MANY_ROWS THEN
    DBMS_OUTPUT.PUT_LINE('MAS DE UNA FILA EN LA CONSULTA DE PARAMETROS' || SQLERRM);
WHEN OTHERS THEN
    DBMS_OUTPUT.PUT_LINE(SQLERRM);

END PRC_CONSULTA_PARAMETROS;

PROCEDURE PRC_INI_PRELIQUIDA_GENERICO(
    TIPO_CARGUE IN VARCHAR2,
    NOMBRE_ARCHIVO_ORIGEN IN VARCHAR2, 
    FECHA_ARCHIVO IN VARCHAR2, 
    SALIDA OUT NUMERIC)
IS
  TIPO_ARCHIVO             INTEGER;
  PREFIJO_TABLA_TEMP_ERROR VARCHAR2(100) ;
  PREFIJO_TABLA_TEMP_BAD   VARCHAR2(100) ;
  PREFIJO_TABLA_TEM_STAGE  VARCHAR2(100) ;
  TABLA_DE_DESTINO         VARCHAR2(100) ;
  SECUENCIA_TABLA_DESTINO  VARCHAR2(100) ;
  CURSORES_CADENA CLOB;
  COLUMNAS_TABLA_DESTINO CLOB;
  CADENA_CONCATENA_ERROR CLOB;
BEGIN

  --PKG_UTILITARIOS.REPORTA_ERROR('1234','INICIA CONSULTA PARAMETROS');
  PRC_CONSULTA_PARAMETROS( TIPO_CARGUE, TIPO_ARCHIVO, PREFIJO_TABLA_TEMP_ERROR, PREFIJO_TABLA_TEMP_BAD, PREFIJO_TABLA_TEM_STAGE, TABLA_DE_DESTINO, SECUENCIA_TABLA_DESTINO, CURSORES_CADENA, COLUMNAS_TABLA_DESTINO, CADENA_CONCATENA_ERROR );
  --PKG_UTILITARIOS.REPORTA_ERROR('1234','FINALIZA CONSULTA PARAMETROS');
  PKG_CARGUE_ARCHIVOS.PRC_GENERICO_CARGUE(NOMBRE_ARCHIVO_ORIGEN, FECHA_ARCHIVO, TIPO_ARCHIVO, PREFIJO_TABLA_TEMP_ERROR, PREFIJO_TABLA_TEMP_BAD, PREFIJO_TABLA_TEM_STAGE, TABLA_DE_DESTINO, CURSORES_CADENA, COLUMNAS_TABLA_DESTINO, SECUENCIA_TABLA_DESTINO, CADENA_CONCATENA_ERROR, SALIDA);
  DBMS_OUTPUT.PUT_LINE('termino_opcon:'||SALIDA);
  --PKG_UTILITARIOS.REPORTA_ERROR('1234','FINALIZA CARGUE ARCHIVOS');
EXCEPTION
WHEN OTHERS THEN
  SALIDA := C_BANDERA_BAJA;
  DBMS_OUTPUT.PUT_LINE('termino_opcon:'||SALIDA);
  --PKG_UTILITARIOS.REPORTA_ERROR('1234','PRC_INI_PRELIQUIDA_GENERICO CON ERROR: '||SQLERRM);
  DBMS_OUTPUT.PUT_LINE('PRC_INI_PRELIQUIDA_GENERICO:'||SQLERRM);
END PRC_INI_PRELIQUIDA_GENERICO;
END PKG_EJECUTA_CARGUES;
/